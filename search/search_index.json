{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to COMP423 Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Ansh Desai</li> <li>Reviewer: Sujay Patel</li> </ul>"},{"location":"tutorials/rust-setup/#intro","title":"Intro","text":"<p>This is a guide for setting up a Rust project with a Git repository and a dev container, and produce a \"Hello COMP423!\" program.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>Visual Studio Code as well as the Remote \u2013 Containers extension</li> <li>Git</li> <li>Docker</li> </ul>"},{"location":"tutorials/rust-setup/#step-by-step-instructions-for-creating-a-new-dev-container-project-for-rust","title":"Step-by-step instructions for creating a new Dev Container project for Rust","text":""},{"location":"tutorials/rust-setup/#step-1","title":"Step 1","text":"<p>Open your terminal and create a directory for your Rust project: <pre><code>mkdir rust-hello-world\ncd rust-hello-world\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2","title":"Step 2","text":"<p>Initialize a new Git repository: <pre><code>git init\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-3","title":"Step 3","text":"<p>Create a new public repository on GitHub and copy its URL. Then, link it to your local project: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-hello-world.git\n</code></pre></p> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p>"},{"location":"tutorials/rust-setup/#step-4","title":"Step 4","text":"<p>Set up a Dev Container configuration for your project:</p> <ol> <li> <p>Create a <code>.devcontainer</code> folder and a <code>devcontainer.json</code> file:    <pre><code>mkdir .devcontainer\ntouch .devcontainer/devcontainer.json\n</code></pre></p> </li> <li> <p>Open the <code>devcontainer.json</code> file in your editor and add the following configuration:    <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/base:ubuntu\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/rust\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>Save the file and reopen the project in the container by pressing <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option.</p> </li> </ol>"},{"location":"tutorials/rust-setup/#step-5","title":"Step 5","text":"<p>Verify that Rust is installed and working inside the Dev Container:</p> <ol> <li> <p>Open a terminal in VS Code (inside the container) and run:    <pre><code>rustc --version\n</code></pre></p> </li> <li> <p>You should see output similar to the following:    <pre><code>rustc 1.x.x (some-hash YYYY-MM-DD)\n</code></pre></p> </li> </ol> <p>This confirms that Rust is installed and ready to use in your Dev Container.</p> <p>Here\u2019s how we can start with Step 1 under your new section:</p>"},{"location":"tutorials/rust-setup/#steps-to-create-a-new-project-write-a-basic-hello-comp423-program-compile-and-run","title":"Steps to create a new project, write a basic \"Hello COMP423\" program, compile, and run","text":""},{"location":"tutorials/rust-setup/#step-1_1","title":"Step 1","text":"<p>Create a new Rust project using Cargo:</p> <ol> <li>Run the following command to initialize a new Cargo project:    <pre><code>cargo new hello-comp423 --vcs none\n</code></pre></li> </ol> <p>This creates a new folder called <code>hello-comp423</code> with the default structure for a Rust project.</p> <ol> <li> <p>Navigate into the project directory:    <pre><code>cd hello-comp423\n</code></pre></p> </li> <li> <p>Verify the folder structure. You should see:    <pre><code>hello-comp423/\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 main.rs\n</code></pre></p> </li> </ol> <p>The <code>Cargo.toml</code> file contains metadata about the project, and <code>src/main.rs</code> is where you\u2019ll write your program.</p>"},{"location":"tutorials/rust-setup/#step-2_1","title":"Step 2","text":"<p>Write the \"Hello, COMP423!\" program:</p> <ol> <li> <p>Open the <code>src/main.rs</code> file in your project directory. Replace its contents with the following code:    <pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre></p> </li> <li> <p>Save the file.</p> </li> </ol> <p>This is your basic Rust program, which prints \"Hello, COMP423!\" to the console when executed.</p>"},{"location":"tutorials/rust-setup/#step-3_1","title":"Step 3","text":"<p>Compile and run the program:</p> <ol> <li> <p>To compile the program, run:    <pre><code>cargo build\n</code></pre></p> </li> <li> <p>To execute the compiled program, run:    <pre><code>./target/debug/hello-comp423\n</code></pre></p> </li> </ol> <p>You should see the output:    <pre><code>Hello COMP423!\n</code></pre></p> <p>Alternatively, you can compile and run the program in one step using:    <pre><code>cargo run\n</code></pre></p> <p>This will both build the program and immediately execute it, showing the output:    <pre><code>Hello COMP423!\n</code></pre></p> <p>Note</p> <ul> <li><code>cargo build</code>: This command compiles the program and generates an executable file in the <code>target/debug</code> directory. It\u2019s useful when you want to inspect or reuse the binary later without immediately running the program.</li> <li><code>cargo run</code>: This command combines building and executing the program in a single step, which is convenient for quick testing during development.</li> </ul>"},{"location":"tutorials/rust-setup/#step-4_1","title":"Step 4","text":"<ol> <li> <p>Stage files, and add a README:    <pre><code>echo \"https://anshdesai04.github.io/comp423-course-notes/tutorials/rust-setup/\" &gt; README.md\ngit add .\n</code></pre></p> </li> <li> <p>Add configs and commit:    <pre><code>git config user.name --global \"your-username-here\"\ngit config user.email --global \"your-email-here\"\ngit commit -m \"your-message-here\"\n</code></pre></p> </li> <li> <p>Push to remote:    <pre><code>git branch -M main\ngit push --set-upstream origin main\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#congrats-you-have-finished","title":"Congrats you have finished!","text":""}]}